/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface IRecordInterface extends utils.Interface {
  functions: {
    "hasSigned(address)": FunctionFragment;
    "immutableFrom()": FunctionFragment;
    "sign()": FunctionFragment;
    "traceMultiTags(address,uint256[])": FunctionFragment;
    "traceOneTag(address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "hasSigned"
      | "immutableFrom"
      | "sign"
      | "traceMultiTags"
      | "traceOneTag"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "hasSigned",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "immutableFrom",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "sign", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "traceMultiTags",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "traceOneTag",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "hasSigned", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "immutableFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sign", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "traceMultiTags",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "traceOneTag",
    data: BytesLike
  ): Result;

  events: {
    "RecordSigned(address)": EventFragment;
    "TagTraced(uint256,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "RecordSigned"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TagTraced"): EventFragment;
}

export interface RecordSignedEventObject {
  signer: string;
}
export type RecordSignedEvent = TypedEvent<[string], RecordSignedEventObject>;

export type RecordSignedEventFilter = TypedEventFilter<RecordSignedEvent>;

export interface TagTracedEventObject {
  tagTraceId: BigNumber;
  tagRepoAddress: string;
  tagId: BigNumber;
}
export type TagTracedEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  TagTracedEventObject
>;

export type TagTracedEventFilter = TypedEventFilter<TagTracedEvent>;

export interface IRecord extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IRecordInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    hasSigned(
      signer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    immutableFrom(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sign(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    traceMultiTags(
      tagRepoAddress: PromiseOrValue<string>,
      tagIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    traceOneTag(
      tagRepoAddress: PromiseOrValue<string>,
      tagId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  hasSigned(
    signer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  immutableFrom(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sign(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  traceMultiTags(
    tagRepoAddress: PromiseOrValue<string>,
    tagIds: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  traceOneTag(
    tagRepoAddress: PromiseOrValue<string>,
    tagId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    hasSigned(
      signer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    immutableFrom(overrides?: CallOverrides): Promise<BigNumber>;

    sign(overrides?: CallOverrides): Promise<void>;

    traceMultiTags(
      tagRepoAddress: PromiseOrValue<string>,
      tagIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    traceOneTag(
      tagRepoAddress: PromiseOrValue<string>,
      tagId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "RecordSigned(address)"(
      signer?: PromiseOrValue<string> | null
    ): RecordSignedEventFilter;
    RecordSigned(
      signer?: PromiseOrValue<string> | null
    ): RecordSignedEventFilter;

    "TagTraced(uint256,address,uint256)"(
      tagTraceId?: PromiseOrValue<BigNumberish> | null,
      tagRepoAddress?: PromiseOrValue<string> | null,
      tagId?: PromiseOrValue<BigNumberish> | null
    ): TagTracedEventFilter;
    TagTraced(
      tagTraceId?: PromiseOrValue<BigNumberish> | null,
      tagRepoAddress?: PromiseOrValue<string> | null,
      tagId?: PromiseOrValue<BigNumberish> | null
    ): TagTracedEventFilter;
  };

  estimateGas: {
    hasSigned(
      signer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    immutableFrom(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sign(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    traceMultiTags(
      tagRepoAddress: PromiseOrValue<string>,
      tagIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    traceOneTag(
      tagRepoAddress: PromiseOrValue<string>,
      tagId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    hasSigned(
      signer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    immutableFrom(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sign(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    traceMultiTags(
      tagRepoAddress: PromiseOrValue<string>,
      tagIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    traceOneTag(
      tagRepoAddress: PromiseOrValue<string>,
      tagId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
