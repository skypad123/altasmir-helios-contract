/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface ITagsRepoInterface extends utils.Interface {
  functions: {
    "privateKey(uint256)": FunctionFragment;
    "tagMulti(string[],string[])": FunctionFragment;
    "tagOne(string,string)": FunctionFragment;
    "totalTags()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "privateKey" | "tagMulti" | "tagOne" | "totalTags"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "privateKey",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "tagMulti",
    values: [PromiseOrValue<string>[], PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "tagOne",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "totalTags", values?: undefined): string;

  decodeFunctionResult(functionFragment: "privateKey", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tagMulti", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tagOne", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "totalTags", data: BytesLike): Result;

  events: {
    "TagCreated(uint256,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "TagCreated"): EventFragment;
}

export interface TagCreatedEventObject {
  tagId: BigNumber;
  tagUri: string;
}
export type TagCreatedEvent = TypedEvent<
  [BigNumber, string],
  TagCreatedEventObject
>;

export type TagCreatedEventFilter = TypedEventFilter<TagCreatedEvent>;

export interface ITagsRepo extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ITagsRepoInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    privateKey(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    tagMulti(
      tagUris: PromiseOrValue<string>[],
      encryptionKeys: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    tagOne(
      tagUrl: PromiseOrValue<string>,
      encryptionKey: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    totalTags(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  privateKey(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  tagMulti(
    tagUris: PromiseOrValue<string>[],
    encryptionKeys: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  tagOne(
    tagUrl: PromiseOrValue<string>,
    encryptionKey: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  totalTags(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    privateKey(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    tagMulti(
      tagUris: PromiseOrValue<string>[],
      encryptionKeys: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    tagOne(
      tagUrl: PromiseOrValue<string>,
      encryptionKey: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalTags(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "TagCreated(uint256,string)"(
      tagId?: null,
      tagUri?: null
    ): TagCreatedEventFilter;
    TagCreated(tagId?: null, tagUri?: null): TagCreatedEventFilter;
  };

  estimateGas: {
    privateKey(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    tagMulti(
      tagUris: PromiseOrValue<string>[],
      encryptionKeys: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    tagOne(
      tagUrl: PromiseOrValue<string>,
      encryptionKey: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    totalTags(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    privateKey(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    tagMulti(
      tagUris: PromiseOrValue<string>[],
      encryptionKeys: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    tagOne(
      tagUrl: PromiseOrValue<string>,
      encryptionKey: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    totalTags(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
